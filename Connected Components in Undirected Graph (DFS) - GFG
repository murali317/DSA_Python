Connected Components in an Undirected Graph
Difficulty: MediumAccuracy: 48.5%Submissions: 15K+Points: 4
Given an undirected graph with V vertices numbered from 0 to V-1 and E edges, represented as a 2D array edges[][], where each entry edges[i] = [u, v] denotes an edge between vertices u and v.

Your task is to return a list of all connected components. Each connected component should be represented as a list of its vertices, with all components returned in a collection where each component is listed separately.

Note: You can return the components in any order, driver code will print the components in sorted order.

Examples :

Input: V = 5, edges[][] = [[0, 1], [2, 1], [3, 4]]
Output: [[0, 1, 2], [3, 4]]
Explanation:

Input: V = 7, edges[][] = [[0, 1], [6, 0], [2, 4], [2, 3], [3, 4]]
Output: [[0, 1, 6], [2, 3, 4], [5]]
Explanation:

Constraints:
1 ≤ V ≤ 105
1 ≤ edges.size() ≤ 105
0 <= edges[i][0], edges[i][1] < V

# --------------------------------------------- SOLUTION ----------------------------------------------------------- #

class Solution:
    # Function to return connected components of the graph
    def getComponents(self, V, edges):
        
        # Create an adjacency list from the edge list.
        # Initialize a visited array and mark every node as unvisited initially.
        # Start from any unvisited node and perform a DFS. All nodes reachable from this node will belong to the same connected component.
        # Iterate over all nodes, and for each unvisited node, perform a DFS and store the result.
        
        # ---------------------- USING  DFS -----------------
        # time - O(V+E)
        # space - O(V+E)
        
        c = 0
        visited = [False] * V # O(V) - one boolean per vertex
        adj = [[] for _ in range(V)] # O(V+E) 
        components = [] # O(E)
        
        for u,v in edges: # O(E)
            adj[u].append(v)
            adj[v].append(u)
            
        def dfs(node, comp):
            visited[node] = True
            comp.append(node) # append those visited nodes.
            for nei in adj[node]:
                if not visited[nei]:
                    dfs(nei, comp)
                
        for i in range(V):
            if not visited[i]:
                comp = []
                dfs(i, comp)
                components.append(comp)                
        
        return components

------------------------------------------------------------------------------------------------------------------------
** SOLUTION LINK ** : https://www.geeksforgeeks.org/problems/connected-components-in-an-undirected-graph/1
------------------------------------------------------------------------------------------------------------------------
