Connected Components in an Undirected Graph
Difficulty: MediumAccuracy: 48.5%Submissions: 15K+Points: 4
Given an undirected graph with V vertices numbered from 0 to V-1 and E edges, represented as a 2D array edges[][], where each entry edges[i] = [u, v] denotes an edge between vertices u and v.

Your task is to return a list of all connected components. Each connected component should be represented as a list of its vertices, with all components returned in a collection where each component is listed separately.

Note: You can return the components in any order, driver code will print the components in sorted order.

Examples :

Input: V = 5, edges[][] = [[0, 1], [2, 1], [3, 4]]
Output: [[0, 1, 2], [3, 4]]
Explanation:

Input: V = 7, edges[][] = [[0, 1], [6, 0], [2, 4], [2, 3], [3, 4]]
Output: [[0, 1, 6], [2, 3, 4], [5]]
Explanation:

Constraints:
1 ≤ V ≤ 105
1 ≤ edges.size() ≤ 105
0 <= edges[i][0], edges[i][1] < V

# --------------------------------------------- SOLUTION ---------------------------------------------- #

# -------------------- DSU (UNION-FIND) ---------------------
        # INTUITION - 
        # 1.🔍 Find Operation:
        #   Finds the root of the set x belongs to.
        #   Path Compression: while returning the root, it flattens the tree, making future finds faster.
        
        # 2.🤝 Union Operation:
        #   Connects two sets by attaching one root under the other.
        #   Uses union by rank to ensure the smaller tree goes under the larger one to maintain flatness.

        # time - O(V+E)
        # space - O(V)
        from collections import defaultdict
        parent = [i for i in range(V)] # Each node is its own parent initially.
        rank = [0] * V
        
        # Path compression
        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x]) # Recursively find and compress the path
            return parent[x]
            
        # Union by Rank
        def union(x, y):
            rootx = find(x) # first, find the roots of both sets
            rooty = find(y)
            
            if rootx == rooty:
                return # Already in the same set, so nothing to do.
            
            if rank[rootx] > rank[rooty]:
                parent[rooty] = rootx # Always attach the shorter tree under the taller one
            elif rank[rooty] > rank[rootx]:
                parent[rootx] = rooty
            else: # If both ranks are equal, choose one as root and increase its rank.
                parent[rooty] = rootx
                rank[rootx] += 1
            return True
        
        comp = defaultdict(list)
        for u,v in edges:
            union(u, v)
                
        for i in range(V):
            root = find(i)
            comp[root].append(i)
        
        return list(comp.values())
            
