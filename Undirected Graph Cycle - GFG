Given an undirected graph with V vertices and E edges, represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an edge between vertices u and v, determine whether the graph contains a cycle or not.

Examples:

Input: V = 4, E = 4, edges[][] = [[0, 1], [0, 2], [1, 2], [2, 3]]
Output: true
Explanation: 
 
1 -> 2 -> 0 -> 1 is a cycle.
Input: V = 4, E = 3, edges[][] = [[0, 1], [1, 2], [2, 3]]
Output: false
Explanation: 
 
No cycle in the graph.
Constraints:
1 ≤ V ≤ 105
1 ≤ E = edges.size() ≤ 105

# --------------------------------------- SOLUTION ---------------------------------------------------- #

class Solution:
	def isCycle(self, V, edges):
	    edges = [(u-1, v-1) for u,v in edges]
		visited = [False] * V
		
        # Step 1: Convert edge list to adjacency list
		adj = [[] for _ in range(V)]
		for u, v in edges:
		    adj[u].append(v)
		    adj[v].append(u) # since undirectional graph
		
        # Step 2: DFS with parent tracking		
		def dfs(i, parent):
		    visited[i] = True
		    for j in adj[i]:
		        if not visited[j]:
		            if dfs(j, i):
		                return True
		        elif j != parent: # main condition (if neighbour != immediate_parent)
		            return True # then its a cycle
		    return False
		    
        # Step 3: Handle disconnected components
		for i in range(V):
		    if not visited[i]:
		        if dfs(i, -1): # initially giving parent as -1 (root)
		            return True
		
		return False
